pipeline {
    agent any
    environment {
        // Docker Hub image name
        registry = "brenneran/flaskapp"

        // Jenkins credential ID for Docker Hub
        registryCredential = 'dockerhub-credentials'
        dockerImage = ''
    }
    stages {
        stage('Cleanup Workspace') {
            steps {
                script {
                    // Clean the workspace to ensure a fresh start
                    cleanWs()
                }
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Stop and Remove Docker Container') {
            steps {
                script {
                    // Stop and remove the container for the image "brenneran/flaskapp"
                    sh """
                    docker ps -q --filter "ancestor=brenneran/flaskapp" | xargs -r docker stop
                    docker ps -aq --filter "ancestor=brenneran/flaskapp" | xargs -r docker rm
                    """
                    
                    // Remove containers running with command: "python3 app/app.py"
                    sh 'docker ps -aq --filter "ancestor=brenneran/flaskapp" --filter "command=python3 app/app.py" | xargs -r docker rm -f'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using the Dockerfile in the app directory
                    dockerImage = docker.build("${registry}:latest", "-f app/Dockerfile .")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push Docker image to the Docker Hub registry
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                sh 'docker run -d -p 5000:5000 brenneran/flaskapp'
            }
        }
    }
}